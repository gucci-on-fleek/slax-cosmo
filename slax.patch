diff --git a/configure.ac b/configure.ac
index e0f33d1..f7308ab 100644
--- a/configure.ac
+++ b/configure.ac
@@ -340,60 +340,20 @@ then
 		AC_MSG_ERROR(Version $XSLTVERS found. You need at least libxslt $LIBXSLT_REQUIRED_VERSION for this version of libxslt)
 	fi
 else
 	AC_MSG_ERROR([Could not find libxslt anywhere, check ftp://xmlsoft.org/.])
 fi
 
 AC_SUBST(XSLT_CONFIG)
 AC_SUBST(LIBXSLT_CFLAGS)
 AC_SUBST(LIBXSLT_LIBS)
 
-LIBCURL_CONFIG_PREFIX=""
-
-AC_ARG_WITH(libcurl-prefix,
-        [  --with-libcurl-prefix=[PFX]           Specify location of libcurl config],
-        LIBCURL_CONFIG_PREFIX=$withval
-)
-
-AC_SUBST(LIBCURL_REQUIRED_VERSION)
-AC_MSG_CHECKING(for libcurl libraries >= $LIBCURL_REQUIRED_VERSION) 
-if test "x$LIBCURL_CONFIG_PREFIX" != "x"
-then
-        CURL_CONFIG=${LIBCURL_CONFIG_PREFIX}/bin/curl-config
-else
-        CURL_CONFIG=curl-config
-fi
-
-dnl
-dnl make sure curl-config is executable,
-dnl test version and init our variables
-dnl
-
-if ${CURL_CONFIG} --libs > /dev/null 2>&1
-then
-        CURLVERS=`$CURL_CONFIG --version`
-        if test VERSION_TO_NUMBER(echo $CURLVERS) -ge VERSION_TO_NUMBER(echo $LIBCURL_REQUIRED_VERSION)
-        then
-                LIBCURL_LIBS="$LIBCURL_LIBS `$CURL_CONFIG --libs`"
-                LIBCURL_CFLAGS="$LIBCURL_CFLAGS `$CURL_CONFIG --cflags`"
-                AC_MSG_RESULT($CURLVERS found)
-        else
-                AC_MSG_ERROR(Version $CURLVERS found. You need at least libcurl $LIBCURL_REQUIRED_VERSION for this version of libslax)
-        fi
-else
-        AC_MSG_ERROR([Could not find libcurl anywhere, check http://curl.haxx.se])
-fi
-
-AC_SUBST(CURL_CONFIG)
-AC_SUBST(LIBCURL_CFLAGS)
-AC_SUBST(LIBCURL_LIBS)
-
 #
 # Find the version of BISON
 #
 AC_MSG_CHECKING([bison version])
 test -z "${BISON}" && BISON=bison
 BISON_VERSION=[`${BISON} --version | grep 'GNU Bison' | cut -d ' ' -f 4 \
     | sed -e 's/[-\.]/ /g' | tr -d a-z \
     | sed -e 's/\([0-9]*\) \([0-9]*\).*/\1.\2/'`]
 BISON_VERSION_NUMBER=VERSION_TO_NUMBER(echo $BISON_VERSION)
 AC_SUBST(BISON_VERSION)
diff --git a/libslax/slaxext.c b/libslax/slaxext.c
index 506c753..c80114f 100644
--- a/libslax/slaxext.c
+++ b/libslax/slaxext.c
@@ -40,21 +40,21 @@
 #include <sys/queue.h>
 #include <sys/resource.h>
 
 #ifdef HAVE_STDTIME_TZFILE_H
 #include <stdtime/tzfile.h>
 #endif /* HAVE_STDTIME_TZFILE_H */
 
 #include <libslax/slaxdata.h>
 
 #define SYSLOG_NAMES		/* Ask for all the names and typedef CODE */
-#include <sys/syslog.h>
+//#include <sys/syslog.h>
 
 #include <libxslt/xsltutils.h>
 #include <libxslt/transform.h>
 #include <libxml/xpathInternals.h>
 #include <libxml/parserInternals.h>
 #include <libxml/uri.h>
 #include <libpsu/psubase64.h>
 #include <libpsu/psuthread.h>
 
 #include "slaxext.h"
@@ -83,36 +83,38 @@ static THREAD_GLOBAL(xmlChar) slax_empty_string[1];
 /*
  * Macosx issue: their version of c_name lacks the "const" and
  * GCC nicks us for putting constant strings into a "char *".
  * Somehow this works for <sys/syslog.h> but not for us....
  */
 typedef struct const_code {
     const char *c_name;
     int c_val;
 } XCODE;
 
+#if 0
 XCODE junos_facilitynames[] = {
     { "dfc",      LOG_LOCAL1 }, /**< Local DFC facility */
     { "external", LOG_LOCAL2 },  /**< Local external facility */
     { "firewall", LOG_LOCAL3 }, /**< Local firewall facility */
     { "pfe",      LOG_LOCAL4 }, /**< Local PFE facility */
     { "conflict", LOG_LOCAL5 }, /**< Local conflict facility */
     { "change",   LOG_LOCAL6 }, /**< Local change facility */
     { "interact", LOG_LOCAL7 }, /**< Local interact facility */
     { NULL,       -1         }
 };
 
 /*
  * More macosx breakage: their version of LOG_MAKEPRI() does the "<<3"
  * shift on fac values that are already shifted.
  */
 #define LOG_MAKEPRI_REAL(fac, pri) ((fac) | (pri))
+#endif
 
 /*
  * Emit an error using a parser context
  */
 void
 slaxTransformError (xmlXPathParserContextPtr ctxt, const char *fmt, ...)
 {
     char buf[BUFSIZ];
     va_list vap;
     xsltTransformContextPtr tctxt = xsltXPathGetTransformContext(ctxt);
@@ -2062,20 +2064,21 @@ slaxExtSplit (xmlXPathParserContext *ctxt, int nargs)
     xmlXPathFreeNodeSet(results);
     return;
 
  fail:
 
     regerror(rc, &reg, buf, sizeof(buf));
     xsltGenericError(xsltGenericErrorContext, "regex error: %s\n", buf);
     goto done;
 }
 
+#if 0
 /*
  * Helper function for slaxExtSyslog() to decode the given priority.
  *
  */
 static int
 slaxExtDecode (const char *name, const CODE *codetab)
 {
     const CODE *c;
 
     for (c = codetab; c->c_name; c++)
@@ -2222,20 +2225,21 @@ bail:
 	if (strstack[ndx])
 	    xmlFree(strstack[ndx]);
     }
 
     /*
      * Nothing to return, we just push NULL
      */
     valuePush(ctxt, xmlXPathNewNodeSet(NULL));
 
 }
+#endif
 
 /*
  * This function calculates the diffrence between times 'new' and 'old'
  * by subtracting 'old' from 'new' and put the result in 'diff'.
  */
 int
 slaxExtTimeDiff (const struct timeval *new, const struct timeval *old,
 	   struct timeval *diff)
 {
     long sec = new->tv_sec, usec = new->tv_usec;
@@ -3307,21 +3311,21 @@ slaxExtRegisterOther (const char *namespace)
     slaxRegisterFunction(namespace, "output", slaxExtOutput);
     slaxRegisterFunction(namespace, "progress", slaxExtProgress);
     slaxRegisterFunction(namespace, "printf", slaxExtPrintf);
     slaxRegisterFunction(namespace, "regex", slaxExtRegex);
     slaxRegisterFunction(namespace, "sleep", slaxExtSleep);
     slaxRegisterFunction(namespace, "split", slaxExtSplit);
     slaxRegisterFunction(namespace, "sprintf", slaxExtPrintf);
 #if defined(HAVE_SYS_SYSCTL_H) && defined(HAVE_SYSCTLBYNAME)
     slaxRegisterFunction(namespace, "sysctl", slaxExtSysctl);
 #endif
-    slaxRegisterFunction(namespace, "syslog", slaxExtSyslog);
+//    slaxRegisterFunction(namespace, "syslog", slaxExtSyslog);
     slaxRegisterFunction(namespace, "trace", slaxExtTrace);
 
     return 0;
 }
 
 /* ---------------------------------------------------------------------- */
 
 /**
  * Registers the SLAX extensions
  */
diff --git a/libslax/slaxio.c b/libslax/slaxio.c
index 76616a7..2cf448e 100644
--- a/libslax/slaxio.c
+++ b/libslax/slaxio.c
@@ -205,23 +205,23 @@ slaxIoRegister (slaxInputCallback_t input_callback,
     slaxOutputCallback = output_callback;
     slaxWriteCallback = raw_write;
     slaxErrorCallback = error_callback;
 }
 
 static char *
 slaxIoStdioInputCallback (const char *prompt, unsigned flags UNUSED)
 {
     char *cp;
 
-    if (flags & SIF_SECRET) {
-	cp = getpass(prompt);
-	return cp ? (char *) xmlStrdup((xmlChar *) cp) : NULL;
+    if (0) {
+	//cp = getpass(prompt);
+	//return cp ? (char *) xmlStrdup((xmlChar *) cp) : NULL;
 
     } else {
 #if defined(HAVE_READLINE) || defined(HAVE_LIBEDIT)
 	char *res;
 
 	/*
 	 * The readline library doesn't seem to like multi-line
 	 * prompts.  So we avoid them.
 	 */
 	cp = strrchr(prompt, '\n');
diff --git a/libslax/slaxparser-tail.y b/libslax/slaxparser-tail.y
index b737b67..5f8d886 100644
--- a/libslax/slaxparser-tail.y
+++ b/libslax/slaxparser-tail.y
@@ -1,12 +1,15 @@
 %%
 #line 3 "slaxparser-tail.y"
+#ifndef YYTERROR
+#define YYTERROR YYSYMBOL_YYerror
+#endif
 
 /*
  * Copyright (c) 2006-2013, 2021, Juniper Networks, Inc.
  * All rights reserved.
  * See ../Copyright for the status of this software
  *
  * Tail of slaxparser.y
  */
 
 const char *slaxKeywordString[YYNTOKENS];
diff --git a/slaxproc/slaxproc.c b/slaxproc/slaxproc.c
index 09ff922..e17cb8e 100644
--- a/slaxproc/slaxproc.c
+++ b/slaxproc/slaxproc.c
@@ -1,20 +1,22 @@
 /*
  * Copyright (c) 2006-2013, Juniper Networks, Inc.
  * All rights reserved.
  * This SOFTWARE is licensed under the LICENSE provided in the
  * ../Copyright file. By downloading, installing, copying, or otherwise
  * using the SOFTWARE, you agree to be bound by the terms of that
  * LICENSE.
  *
  * slaxproc -- a command line interface to the SLAX language
  */
+STATIC_YOINK("blink_linux_aarch64");
+STATIC_YOINK("blink_xnu_aarch64");
 
 #include "slaxinternals.h"
 #include <libslax/slax.h>
 
 #include <sys/queue.h>
 
 #include <libxslt/transform.h>
 #include <libxml/HTMLparser.h>
 #include <libxslt/xsltutils.h>
 #include <libxml/globals.h>
